// Code generated by github.com/dshulyak/borsh/gen. DO NOT EDIT.

package imported

import (
	"io"

	"github.com/dshulyak/borsh"
)

func (t *Struct) SizeBorsh() (size int) {
	// field Uint32 (0)
	size += 4

	// field Bytes (1)
	size += 1
	if t.Bytes != nil {
		size += 4 + len(t.Bytes)
	}

	return
}

func (t *Struct) MarshalBorsh(w io.Writer) error {
	// field Uint32 (0)
	if err := borsh.WriteUint32(w, t.Uint32); err != nil {
		return err
	}

	// field Bytes (1)
	if t.Bytes == nil {
		if err := borsh.WriteBool(w, false); err != nil {
			return err
		}
	} else {
		if err := borsh.WriteBool(w, true); err != nil {
			return err
		}
		if err := borsh.WriteLength(w, len(t.Bytes)); err != nil {
			return err
		}
	}
	if err := borsh.WriteBytes(w, t.Bytes[:]); err != nil {
		return err
	}

	return nil
}

func (t *Struct) UnmarshalBorsh(r io.Reader) error {
	// field Uint32 (0)
	if val, err := borsh.ReadUint32(r); err != nil {
		return err
	} else {
		t.Uint32 = val
	}

	// field Bytes (1)
	if exist, err := borsh.ReadBool(r); err != nil {
		return err
	} else if exist {
		if lth, err := borsh.ReadUint32(r); err != nil {
			return err
		} else {
			t.Bytes = make([]uint8, lth)
		}
	}
	if err := borsh.ReadBytes(r, t.Bytes[:]); err != nil {
		return err
	}

	return nil
}
