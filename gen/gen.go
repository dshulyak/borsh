package gen

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"io"
	"os"
	"reflect"
	"text/template"
)

func Generate(pkg string, filepath string, objs ...interface{}) error {
	buf := bytes.NewBuffer(nil)
	ctx := &genContext{Package: pkg, Imported: generateImports(objs...)}

	if err := executeTemplate(buf, `// Code generated by github.com/spacemeshos/borsh/gen. DO NOT EDIT.

	package {{ .Package }}
	
	import (
		"io"

		"github.com/spacemeshos/borsh"

		{{ range $pkg, $short := .Imported }}{{ $short }} "{{ $pkg }}"
        {{ end }}
	)
	`, ctx); err != nil {
		return err
	}

	for _, obj := range objs {
		if err := generateType(buf, ctx, obj); err != nil {
			return err
		}
	}
	data, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	return os.WriteFile(filepath, data, 0o664)
}

func generateType(w io.Writer, ctx *genContext, obj interface{}) error {
	typ := reflect.TypeOf(obj)

	if err := executeTemplate(w, marshalStart, &typeContext{Name: typ.Name()}); err != nil {
		return err
	}
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		if private(field) {
			continue
		}
		tctx := &typeContext{Name: field.Name, Type: field.Type, Index: "i"}
		if err := executeMarshal(w, tctx); err != nil {
			return err
		}
	}
	fmt.Fprintln(w, "return nil")
	fmt.Fprintln(w, "}")
	fmt.Fprintln(w)
	return nil
}

type genContext struct {
	Package  string
	Imported map[string]string // full path to shortname
}

type typeContext struct {
	Name  string
	Index string
	Type  reflect.Type
}

func executeMarshal(w io.Writer, tc *typeContext) error {
	switch tc.Type.Kind() {
	case reflect.Bool:
		if err := executeTemplate(w, marshalBool, tc); err != nil {
			return err
		}
	case reflect.Uint32:
		if err := executeTemplate(w, marshalUint32, tc); err != nil {
			return err
		}
	case reflect.Struct:
		if err := executeTemplate(w, marshalStruct, tc); err != nil {
			return err
		}
	case reflect.Ptr:
		switch tc.Type.Elem().Kind() {
		case reflect.Array:
			return errors.New("ptr to array is not supported")
		case reflect.Slice:
			return errors.New("ptr to slice is not supported")
		}
		if err := executeTemplate(w, marshalPtr, tc); err != nil {
			return err
		}
	case reflect.Slice:
		if err := executeTemplate(w, marshalLength, tc); err != nil {
			return err
		}
		fallthrough
	case reflect.Array:
		elem := tc.Type.Elem()
		if elem.Kind() == reflect.Uint8 {
			if err := executeTemplate(w, marshalBytes, tc); err != nil {
				return err
			}
		} else {
			if err := executeTemplate(w, marshalLoop, tc); err != nil {
				return err
			}
			if err := executeMarshal(w, &typeContext{
				Name:  fmt.Sprintf("%s[%s]", tc.Name, tc.Index),
				Type:  elem,
				Index: tc.Index + tc.Index,
			}); err != nil {
				return err
			}
			fmt.Fprintln(w, "}")
		}
	default:
		return fmt.Errorf("type %v is not supported", tc.Type.Kind())
	}
	return nil
}

func executeTemplate(w io.Writer, text string, ctx interface{}) error {
	tpl, err := template.New("").Parse(text)
	if err != nil {
		return err
	}
	return tpl.Execute(w, ctx)
}
